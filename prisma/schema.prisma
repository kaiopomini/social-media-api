// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  hash          String
  hashedRT      String?
  posts         Post[]
  profile       Profile?
  userFollowed  Follow[]  @relation("Followers")
  userFollowing Follow[]  @relation("Following")
  comments      Comment[]
  likes         Like[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Profile {
  id     String @id @default(uuid())
  bio    String?
  image  String? 
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid

  @@map("Profiles")
}

model Post {
  id        String    @id @default(uuid()) @db.Uuid
  parentId  String?   @db.Uuid
  content   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]

  @@index([ownerId])
  @@map("Posts")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.Uuid
  parent    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([ownerId])
  @@map("Comments")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.Uuid

  @@index([userId])
  @@index([postId])
  @@map("Likes")
}

model Follow {
  id              String   @id @default(uuid()) @db.Uuid
  userFollowed    User     @relation("Followers", fields: [userFollowedId], references: [id])
  userFollowedId  String   @db.Uuid
  userFollowing   User     @relation("Following", fields: [userFollowingId], references: [id])
  userFollowingId String   @db.Uuid
  createdAt       DateTime @default(now())

  @@index([userFollowedId])
  @@index([userFollowingId])
  @@map("Follows")
}
