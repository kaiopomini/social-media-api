// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  hash      String
  hashedRT  String?
  posts     Post[]
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id     String @id @default(uuid())
  bio    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid

  @@map("Profiles")
}

model Post {
  id        String    @id @default(uuid()) @db.Uuid
  parentId  String?   @db.Uuid
  content   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]

  @@index([ownerId])
  @@map("Posts")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.Uuid
  parent    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("Comments")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.Uuid

  @@index([postId])
  @@map("Likes")
}
